# tasks/main.yml
---
- name: Determine OS name
  ansible.builtin.set_fact:
    asdf_os: >-
      {{ "linux" if ansible_system == "Linux" else "unsupported" }}
  tags: [asdf]

- name: Determine architecture
  ansible.builtin.set_fact:
    asdf_arch: >-
      {{ "amd64" if ansible_architecture in ["x86_64"]
         else "arm64" if ansible_architecture in ["aarch64"]
         else "unsupported" }}
  tags: [asdf]

- name: Fail if unsupported OS or architecture
  ansible.builtin.fail:
    msg: "Unsupported platform: {{ ansible_system }} {{ ansible_architecture }}"
  when: asdf_os == "unsupported" or asdf_arch == "unsupported"
  tags: [asdf]

- name: Ensure asdf version is >= 0.16.0 (Go-based binary)
  ansible.builtin.assert:
    that:
      - asdf_version is version("0.16.0", ">=")
    fail_msg: >
      asdf version {{ asdf_version }} is not supported.
      This role only works with the new Go-based version of asdf (>= 0.16.0).
    success_msg: asdf version {{ asdf_version }} is supported (Go-based).
  tags: [asdf]

- name: Get asdf_user info
  ansible.builtin.getent:
    database: passwd
    key: "{{ asdf_user }}"
  tags: [asdf]

- name: Set asdf_user home
  ansible.builtin.set_fact:
    asdf_user_home: "{{ getent_passwd[asdf_user][4] }}"
  tags: [asdf]

- name: Set asdf_dir
  ansible.builtin.set_fact:
    asdf_dir: "{{ asdf_user_home }}/.asdf"
  when: asdf_dir is undefined
  tags: [asdf]

- name: Set asdf_user .tool-versions file
  ansible.builtin.set_fact:
    asdf_tool_versions_file: "{{ asdf_user_home }}/.tool-versions"
  when: asdf_tool_versions_file is undefined
  tags: [asdf]

- name: Install asdf
  ansible.builtin.import_tasks: install.yml
  tags: [asdf, asdf-install]

- name: Install plugins
  ansible.builtin.import_tasks: plugins.yml
  tags: [asdf, asdf-plugins]
