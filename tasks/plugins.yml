---
- name: Install plugin dependencies
  ansible.builtin.apt:
    name: "{{ asdf_plugin_dependencies }}"
    install_recommends: false
    cache_valid_time: "{{ apt_cache_valid_time }}"
  retries: "{{ remote_package_retries }}"
  register: apt_result
  until: apt_result is succeeded
  become: true
  when: ansible_os_family == "Debian"
  tags: [asdf, asdf-plugins]

- name: Install plugins
  ansible.builtin.command: >
    asdf plugin add {{ item.name }} {{ item.repository | default('') }}
  args:
    creates: "{{ asdf_dir }}/plugins/{{ item.name }}"
  loop: "{{ asdf_plugins }}"
  when: asdf_plugins | length > 0
  become: true
  become_user: "{{ asdf_user }}"
  register: plugin_add_result
  failed_when: false
  tags: [asdf, asdf-plugins]

- name: Include plugin-specific tasks
  ansible.builtin.include_tasks: plugins/{{ item.name }}.yml
  loop: "{{ asdf_plugins }}"
  when: >
    lookup("ansible.builtin.file", role_path ~ "/tasks/plugins/" ~ item.name ~ ".yml", errors="ignore") is not none
  tags: [asdf, asdf-plugins]

- name: Install plugin versions
  ansible.builtin.command: >
    asdf install {{ item.0.name }} {{ item.1 }}
  args:
    creates: "{{ asdf_dir }}/installs/{{ item.0.name }}/{{ item.1 }}"
  loop: "{{ asdf_plugins | subelements('install', skip_missing=True) }}"
  when: asdf_plugins | length > 0
  become: true
  become_user: "{{ asdf_user }}"
  tags: [asdf, asdf-plugins]

- name: Set default plugin versions
  ansible.builtin.command: >
    asdf set -u {{ item.name }} {{ item.default | default(item.install[0]) }}
  loop: "{{ asdf_plugins }}"
  when:
    - item.install is defined
    - item.install | length > 0
  register: set_result
  changed_when: "'Updated' in set_result.stdout"
  become: true
  become_user: "{{ asdf_user }}"
  tags: [asdf, asdf-plugins]
